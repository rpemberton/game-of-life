{"version":3,"sources":["components/Cell/Cell.module.css","components/Cell/Cell.js","components/Board/Board.js","components/Button/Button.js","App.js","serviceWorker.js","index.js","components/Board/Board.module.css","components/Button/Button.module.css"],"names":["module","exports","cell","cell--alive","Cell","_ref","isAlive","onClick","react_default","a","createElement","className","styles","join","Board","board","onCellClick","map","item","i","components_Cell_Cell","key","Button","text","button","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setNextGeneration","state","rAF","setState","prevState","neighbourCount","numCellsRow","numRows","length","count","currRowIndex","Math","floor","prevRowIndex","nextRowIndex","getRow","rowIndex","slice","prevRow","currRow","nextRow","leftIndex","rightIndex","getNeighbourCount","generation","requestAnimationFrame","start","includes","setBoard","pause","cancelAnimationFrame","clear","Array","fill","reset","toggleCellState","cellIndex","numCellsBoard","push","random","components_Button_Button","components_Board_Board","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03b7b14b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__38Qsv\",\"cell--alive\":\"Cell_cell--alive__2AWKf\"};","import React from 'react';\nimport styles from './Cell.module.css';\n\nconst Cell = ({isAlive, onClick}) => (\n\t<button\n\t\tclassName={[styles.cell, isAlive && styles['cell--alive']].join(' ')}\n\t\tonClick={onClick}>\n\t</button>\n);\n\nexport default Cell;\n","import React from 'react';\nimport Cell from '../Cell/Cell';\nimport styles from './Board.module.css';\n\nconst Board = ({ board, onCellClick }) => (\n\t<div className={styles.board}>\n\t\t{board.map((item, i) => {\n\t\t\treturn(\n\t\t\t\t<Cell\n\t\t\t\t\tkey={i}\n\t\t\t\t\tisAlive={item}\n\t\t\t\t\tonClick={() => onCellClick(i)}\n\t\t\t\t/>\n\t\t\t)\n\t\t})}\n\t</div>\n);\n\nexport default Board;\n","import React from 'react';\nimport styles from './Button.module.css';\n\nconst Button = ({ text, onClick }) => (\n\t<button\n\t\tclassName={styles.button}\n\t\tonClick={onClick}>\n\t\t{text}\n\t</button>\n);\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Board from './components/Board/Board';\nimport Button from './components/Button/Button';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      generation: 0,\n      rAF: null\n    };\n\n    this.numCellsBoard = 1980;\n  }\n\n  componentDidMount() {\n    this.setBoard();\n    this.start();\n  }\n\n  setBoard() {\n    const board = [];\n\n    for (let i = 0; i < this.numCellsBoard; i++) {\n      board.push(Math.random() > 0.8 ? 1 : 0);\n    }\n\n    this.setState({\n      board: board,\n      generation: 0\n    });\n  }\n\n  setNextGeneration = () => {\n    if (!this.state.rAF) {\n      return;\n    }\n\n    this.setState((prevState) => ({\n      board: prevState.board.map((item, i) => {\n        const neighbourCount = getNeighbourCount(prevState.board, i);\n        if (neighbourCount === 2) {\n          return item;\n        }\n        if (neighbourCount === 3) {\n          return 1;\n        }\n        return 0;\n      }),\n      generation: prevState.generation + 1\n    }));\n\n    requestAnimationFrame(this.setNextGeneration);\n  }\n\n  start = () => {\n    if (this.state.rAF) {\n      return;\n    }\n\n    if (!this.state.board.includes(1)) {\n      this.setBoard();\n    }\n\n    this.setState({\n      rAF: requestAnimationFrame(this.setNextGeneration),\n    });\n  }\n\n  pause = () => {\n    cancelAnimationFrame(this.state.rAF);\n    this.setState({\n      rAF: null\n    });\n  }\n\n  clear = () => {\n    cancelAnimationFrame(this.state.rAF);\n    this.setState({\n      board: Array(1980).fill(0),\n      generation: 0,\n      rAF: null,\n    });\n  }\n\n  reset = () => {\n    this.pause();\n    this.setBoard();\n  }\n\n  toggleCellState = (i) => {\n    this.setState((prevState) => ({\n      board: prevState.board.map((cell, cellIndex) => {\n        if (cellIndex === i) {\n          return cell ? 0 : 1;\n        }\n        return cell;\n      })\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Game of Life</h1>\n          <p className=\"generation\">Generation: {this.state.generation}</p>\n\n          <div>\n            {\n              this.state.rAF\n                ? <Button onClick={this.pause} text=\"Pause\"/>\n                : <Button onClick={this.start} text={this.state.generation ? 'Resume' : 'Start'}/>\n            }\n            <Button onClick={this.clear} text=\"Clear\"/>\n            <Button onClick={this.reset} text=\"Reset\"/>\n          </div>\n\n          <Board\n            board={this.state.board}\n            onCellClick={this.toggleCellState}\n          />\n\n          <footer className=\"footer\">\n            <p>Learn about Conway&#39;s Game of Life on <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Wikipedia</a>.</p>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nfunction getNeighbourCount(board, i) {\n  const numCellsRow = 60;\n  const numRows = board.length / numCellsRow;\n\n  let count = 0;\n\n  let currRowIndex = Math.floor(i / numCellsRow);\n  let prevRowIndex = currRowIndex - 1;\n  let nextRowIndex = currRowIndex + 1;\n\n  if (prevRowIndex < 0) {\n    prevRowIndex = numRows - 1;\n  }\n\n  if (nextRowIndex === numRows) {\n    nextRowIndex = 0;\n  }\n\n  function getRow(rowIndex) {\n    return board.slice(rowIndex * numCellsRow, (rowIndex * numCellsRow) + numCellsRow);\n  }\n\n  const prevRow = getRow(prevRowIndex);\n  const currRow = getRow(currRowIndex);\n  const nextRow = getRow(nextRowIndex);\n\n  const isLeftSide = i % numCellsRow === 0;\n  const isRightSide = i % numCellsRow === numCellsRow - 1;\n\n  let leftIndex = (i % numCellsRow) - 1;\n  let rightIndex = (i % numCellsRow) + 1;\n\n  if (isLeftSide) {\n    leftIndex = numCellsRow - 1;\n  }\n\n  if (isRightSide) {\n    rightIndex = 0;\n  }\n\n  /*\n  L, T, R\n  L, X, R\n  L, B, R\n  */\n\n  // Count left (L) side\n  if (prevRow[leftIndex]) {\n    count++;\n  }\n  if (currRow[leftIndex]) {\n    count++;\n  }\n  if (nextRow[leftIndex]) {\n    count++;\n  }\n\n  // Count right (R) side\n  if (prevRow[rightIndex]) {\n    count++;\n  }\n  if (currRow[rightIndex]) {\n    count++;\n  }\n  if (nextRow[rightIndex]) {\n    count++;\n  }\n\n  // Count remaining top (T) and bottom (B)\n  if (prevRow[i % numCellsRow]) {\n    count++;\n  }\n  if (nextRow[i % numCellsRow]) {\n    count++;\n  }\n\n  return count;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__2CkUZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3tDxV\"};"],"sourceRoot":""}