{"version":3,"sources":["components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","_ref","text","onClick","react_default","a","createElement","className","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setNextGeneration","state","rAF","setState","prevState","board","map","row","rowIndex","prevRow","length","nextRow","cell","cellIndex","count","leftIndex","rightIndex","generation","drawGeneration","requestAnimationFrame","start","some","includes","setBoard","pause","cancelAnimationFrame","clear","Array","fill","canvas","getContext","clearRect","width","height","reset","toggleCellState","e","persist","rect","target","getBoundingClientRect","x","clientX","y","clientY","Math","floor","i","j","numCellsInRow","numRows","refs","style","scale","push","random","ctx","forEach","fillStyle","fillRect","_this2","components_Button","ref","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8724a58.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = ({ text, onClick }) => (\n\t<button\n\t\tclassName=\"button\"\n\t\tonClick={onClick}>\n\t\t{text}\n\t</button>\n);\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Button from './components/Button';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      generation: 0,\n      rAF: null\n    };\n\n    this.numCellsInRow = 60;\n    this.numRows = 33;\n  }\n\n  componentDidMount() {\n    this.setBoard();\n    this.start();\n  }\n\n  setBoard() {\n    const canvas = this.refs.canvas;\n    this.canvas = canvas;\n\n    // Make canvas look good on retina displays\n    canvas.width = 1440;\n    canvas.height = 792;\n    canvas.style.width = '720px';\n    canvas.style.height = '396px';\n    canvas.getContext('2d').scale(2,2);\n\n    const board = [];\n\n    for (let i = 0; i < this.numRows; i++) {\n      const row = [];\n      for (let j = 0; j < this.numCellsInRow; j++) {\n        row.push(Math.random() > 0.8 ? 1 : 0);\n      }\n      board.push(row);\n    }\n\n    this.setState({\n      board: board,\n      generation: 0\n    }, this.drawGeneration);\n  }\n\n  setNextGeneration = () => {\n    if (!this.state.rAF) {\n      return;\n    }\n\n    this.setState((prevState) => ({\n      board: getUpdatedBoard(prevState.board),\n      generation: prevState.generation + 1\n    }), this.drawGeneration);\n\n    requestAnimationFrame(this.setNextGeneration);\n  }\n\n  drawGeneration() {\n    const canvas = this.canvas;\n    const ctx = canvas.getContext('2d');\n\n    this.state.board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        const x = Math.floor(cellIndex * 12);\n        const y = Math.floor(rowIndex * 12);\n\n        if (cell) {\n          ctx.fillStyle = '#009cde';\n          ctx.fillRect(x, y, 12, 12);\n        } else {\n          ctx.fillStyle = '#f7f7f7';\n          ctx.fillRect(x, y, 12, 12);\n        }\n      });\n    });\n  }\n\n  start = () => {\n    if (this.state.rAF) {\n      return;\n    }\n\n    // Populate board if no cells alive\n    if (!this.state.board.some(row => row.includes(1))) {\n      this.setBoard();\n    }\n\n    this.setState({\n      rAF: requestAnimationFrame(this.setNextGeneration),\n    });\n  }\n\n  pause = () => {\n    cancelAnimationFrame(this.state.rAF);\n    this.setState({\n      rAF: null\n    });\n  }\n\n  clear = () => {\n    cancelAnimationFrame(this.state.rAF);\n    this.setState({\n      board: Array(33).fill(Array(60).fill(0)),\n      generation: 0,\n      rAF: null,\n    }, this.drawGeneration);\n    this.canvas.getContext('2d').clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  reset = () => {\n    this.pause();\n    this.setBoard();\n  }\n\n  toggleCellState = (e) => {\n    e.persist();\n\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.x;\n    const y = e.clientY - rect.y;\n\n    const cellIndex = Math.floor(x / 12);\n    const rowIndex = Math.floor(y / 12);\n\n    this.setState({\n      board: this.state.board.map((row, i) => {\n        if (i === rowIndex) {\n          return row.map((cell, j) => {\n            if (j === cellIndex) {\n              return cell ? 0 : 1;\n            }\n            return cell;\n          })\n        }\n        return row;\n      })\n    }, this.drawGeneration);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Game of Life</h1>\n          <p className=\"generation\">Generation: {this.state.generation}</p>\n\n          <div>\n            {\n              this.state.rAF\n                ? <Button onClick={this.pause} text=\"Pause\"/>\n                : <Button onClick={this.start} text={this.state.generation ? 'Resume' : 'Start'}/>\n            }\n            <Button onClick={this.clear} text=\"Clear\"/>\n            <Button onClick={this.reset} text=\"Reset\"/>\n          </div>\n\n          <canvas\n            onClick={e => this.toggleCellState(e)}\n            ref=\"canvas\"\n            className=\"board\"\n            width=\"720\"\n            height=\"396\">\n          </canvas>\n\n          <footer className=\"footer\">\n            <p>Learn about Conway&#39;s Game of Life on <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Wikipedia</a>.</p>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nfunction getUpdatedBoard(board) {\n  return board.map((row, rowIndex) => {\n    const prevRow = board[rowIndex - 1] || board[board.length - 1];\n    const nextRow = board[rowIndex + 1] || board[0];\n\n    return row.map((cell, cellIndex) => {\n      let count = 0;\n\n      let leftIndex = cellIndex - 1;\n      let rightIndex = cellIndex + 1;\n\n      if (leftIndex < 0) {\n        leftIndex = row.length - 1;\n      }\n\n      if (rightIndex > row.length - 1) {\n        rightIndex = 0;\n      }\n\n      // Count left (L) side\n      if (prevRow[leftIndex]) {\n        count++;\n      }\n      if (row[leftIndex]) {\n        count++;\n      }\n      if (nextRow[leftIndex]) {\n        count++;\n      }\n\n      // Count right (R) side\n      if (prevRow[rightIndex]) {\n        count++;\n      }\n      if (row[rightIndex]) {\n        count++;\n      }\n      if (nextRow[rightIndex]) {\n        count++;\n      }\n\n      // Count remaining top (T) and bottom (B)\n      if (prevRow[cellIndex]) {\n        count++;\n      }\n      if (nextRow[cellIndex]) {\n        count++;\n      }\n\n      if (count === 2) {\n        return cell;\n      }\n      if (count === 3) {\n        return 1;\n      }\n      return 0;\n    });\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}